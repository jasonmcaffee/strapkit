define(["use!handlebars", "core/util/log"], function(Handlebars, log){ 
log("buttonsDemoPage precompiled template function module loaded."); 
var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {}; 
templates['buttonsDemoPage'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var foundHelper, self=this;


  return "<div id=\"buttonsDemo\" class=\"buttons-demo\">\n    <h2>Buttons</h2>\n\n    <h3>Demo</h3>\n\n    <h4>Using :active pseudo selector to transform button on press.</h4>\n    <hr>\n    <div class=\"button-demo\">\n        <label>with gpu:</label>\n        <input type=\"submit\" class=\"button-type-1\" value=\"1\">\n        <div class=\"demo-notes\">here we use a css3 3d property to get gpu to render</div>\n    </div>\n\n    <div class=\"button-demo\">\n        <label>without gpu:</label>\n        <input type=\"submit\" class=\"button-type-2\" value=\"2\">\n        <div class=\"demo-notes\"></div>\n        <table class=\"compatibility-table\">\n            <thead>\n                <tr>\n                    <th>OS</th>\n                    <th>Compatibility</th>\n                </tr>\n            </thead>\n        </table>\n    </div>\n\n    <div class=\"button-demo\" ontouchstart=\"\">\n        <label>ontouchstart=\"\"</label>\n        <input type=\"submit\" class=\"button-type-3\" value=\"3\">\n        <div class=\"demo-notes\">\n            try to improve android performance by using ontouchstart=\"\" on the containing element of the button\n        </div>\n    </div>\n\n    <h4>Using FastButton.js</h4>\n\n    <div id=\"fastButtons\">\n        <div class=\"button-demo\">\n            <label>Fast Button:</label>\n            <input type=\"submit\" class=\"button-type-4 fast-button\" value=\"4\">\n            <div class=\"demo-notes\">\n                javascript hack\n            </div>\n        </div>\n    </div>\n\n\n\n\n\n\n\n\n\n\n    <script type=\"text/javascript\">\n        require(['jquery'], function($){\n            (function() {\n                /**\n                 * From: http://code.this.com/mobile/articles/fast_buttons.html\n                 * Also see: http://stackoverflow.com/questions/6300136/trying-to-implement-googles-fast-button\n                 */\n\n                /** For IE8 and earlier compatibility: https://developer.mozilla.org/en/DOM/element.addEventListener */\n                function addListener(el, type, listener, useCapture) {\n                    if (el.addEventListener) {\n                        el.addEventListener(type, listener, useCapture);\n                        return {\n                            destroy: function() { el.removeEventListener(type, listener, useCapture); }\n                        };\n                    } else {\n                        // see: http://stackoverflow.com/questions/5198845/javascript-this-losing-context-in-ie\n                        var handler = function(e) { listener.handleEvent(window.event, listener); }\n                        el.attachEvent('on' + type, handler);\n\n                        return {\n                            destroy: function() { el.detachEvent('on' + type, handler); }\n                        };\n                    }\n                }\n\n                var isTouch = \"ontouchstart\" in window;\n\n                /* Construct the FastButton with a reference to the element and click handler. */\n                this.FastButton = function(element, handler, useCapture) {\n                    // collect functions to call to cleanup events\n                    this.events = [];\n                    this.touchEvents = [];\n                    this.element = element;\n                    this.handler = handler;\n                    this.useCapture = useCapture;\n                    if (isTouch)\n                        this.events.push(addListener(element, 'touchstart', this, this.useCapture));\n                    this.events.push(addListener(element, 'click', this, this.useCapture));\n                };\n\n                /* Remove event handling when no longer needed for this button */\n                this.FastButton.prototype.destroy = function() {\n                    for (i = this.events.length - 1; i >= 0; i -= 1)\n                        this.events[i].destroy();\n                    this.events = this.touchEvents = this.element = this.handler = this.fastButton = null;\n                };\n\n                /* acts as an event dispatcher */\n                this.FastButton.prototype.handleEvent = function(event) {\n                    switch (event.type) {\n                        case 'touchstart': this.onTouchStart(event); break;\n                        case 'touchmove': this.onTouchMove(event); break;\n                        case 'touchend': this.onClick(event); break;\n                        case 'click': this.onClick(event); break;\n                    }\n                };\n\n                /* Save a reference to the touchstart coordinate and start listening to touchmove and\n                 touchend events. Calling stopPropagation guarantees that other behaviors donâ€™t get a\n                 chance to handle the same click event. This is executed at the beginning of touch. */\n                this.FastButton.prototype.onTouchStart = function(event) {\n                    event.stopPropagation ? event.stopPropagation() : (event.cancelBubble=true);\n                    this.touchEvents.push(addListener(this.element, 'touchend', this, this.useCapture));\n                    this.touchEvents.push(addListener(document.body, 'touchmove', this, this.useCapture));\n                    this.startX = event.touches[0].clientX;\n                    this.startY = event.touches[0].clientY;\n                };\n\n                /* When /if touchmove event is invoked, check if the user has dragged past the threshold of 10px. */\n                this.FastButton.prototype.onTouchMove = function(event) {\n                    if (Math.abs(event.touches[0].clientX - this.startX) > 10 || Math.abs(event.touches[0].clientY - this.startY) > 10) {\n                        this.reset(); //if he did, then cancel the touch event\n                    }\n                };\n\n                /* Invoke the actual click handler and prevent ghost clicks if this was a touchend event. */\n                this.FastButton.prototype.onClick = function(event) {\n                    event.stopPropagation ? event.stopPropagation() : (event.cancelBubble=true);\n                    this.reset();\n                    // Use .call to call the method so that we have the correct \"this\": https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\n                    var result = this.handler.call(this.element, event);\n                    if (event.type == 'touchend')\n                        clickbuster.preventGhostClick(this.startX, this.startY);\n                    return result;\n                };\n\n                this.FastButton.prototype.reset = function() {\n                    for (i = this.touchEvents.length - 1; i >= 0; i -= 1)\n                        this.touchEvents[i].destroy();\n                    this.touchEvents = [];\n                };\n\n                this.clickbuster = function() {}\n\n                /* Call preventGhostClick to bust all click events that happen within 25px of\n                 the provided x, y coordinates in the next 2.5s. */\n                this.clickbuster.preventGhostClick = function(x, y) {\n                    clickbuster.coordinates.push(x, y);\n                    window.setTimeout(clickbuster.pop, 2500);\n                };\n\n                this.clickbuster.pop = function() {\n                    clickbuster.coordinates.splice(0, 2);\n                };\n\n                /* If we catch a click event inside the given radius and time threshold then we call\n                 stopPropagation and preventDefault. Calling preventDefault will stop links\n                 from being activated. */\n                this.clickbuster.onClick = function(event) {\n                    for (var i = 0; i < clickbuster.coordinates.length; i += 2) {\n                        var x = clickbuster.coordinates[i];\n                        var y = clickbuster.coordinates[i + 1];\n                        if (Math.abs(event.clientX - x) < 25 && Math.abs(event.clientY - y) < 25) {\n                            event.stopPropagation ? event.stopPropagation() : (event.cancelBubble=true);\n                            event.preventDefault ? event.preventDefault() : (event.returnValue=false);\n                        }\n                    }\n                };\n\n                if (isTouch) {\n                    // Don't need to use our custom addListener function since we only bust clicks on touch devices\n                    $(function(){\n                        document.getElementById('fastButtons').addEventListener('click', clickbuster.onClick, true);\n                    });\n                    clickbuster.coordinates = [];\n                }\n            })(this);\n\n           $(function(){\n               $('.fast-button').each(function(){\n                   console.log('registering fast button ' + $(this).attr('class'));\n                  new FastButton(this, function(){\n                        console.log('fast-button click');\n                  });\n               });\n           });\n        });\n    </script>\n\n    <!--<input type=\"submit\" class=\"button-type-4\" value=\"4\">-->\n    <!--<input type=\"submit\" class=\"button-type-5\" value=\"5\">-->\n    <!--<input type=\"submit\" class=\"button-type-6\" value=\"6\">-->\n\n    <h3>Caveats</h3>\n    <p>You'll notice that the containing div id=\"buttonsDemo\" contains an attribute ontouchstart=\"\"</p>\n    <p>This allows the :active pseudo selector to actually fire on android and ios</p>\n</div>";}); 
Handlebars.registerPartial("buttonsDemoPage", templates["buttonsDemoPage"]); 
return templates["buttonsDemoPage"]; 
});