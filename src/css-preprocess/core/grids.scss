/*
*   The inline block grid provides the ability to use display:inline-block, without the negative side effects that occur
*   when applying to a ul, dl, etc. (Typically there is spacing that occurs between lis when displayed side by side)
*   after trying each possibility proposed in the below article, YUI Grid System is the best.
*
*   Each direct child element of the grid should have the .inline-block-grid-item class applied.
*   All you have to do to control positioning is adjust the widths of the inline-block-grid-cells.
*   The display:block will trigger when items are pushed over more than 100%.
*   e.g. if you have 3 cells in your grid, and you set cell 1 width to 50%, and cell 2's width to 50%, cell 3 will get
*   pushed down to a new row.
*
*   Limits:
*   - rearranging of cells is restricted to stacking on top of each other. (e.g. you can't move cell 5 to be on top of cell 1)
*   - media queries are intentionally left out so you can compose your own using the mq mixin
*
*   Sources:
*   http://css-tricks.com/fighting-the-space-between-inline-block-elements/
*   http://yui.yahooapis.com/3.5.0/build/cssgrids/grids.css
*/
.inline-block-grid{
  letter-spacing: -0.31em; /* webkit: collapse white-space between units */
  *letter-spacing: normal; /* reset IE < 8 */
  word-spacing: -0.43em; /* IE < 8 && gecko: collapse white-space between units */
}
.inline-block-grid-cell{
  display: inline-block;
  zoom: 1; *display: inline; /* IE < 8: fake inline-block */
  letter-spacing: normal;
  word-spacing: normal;
  vertical-align: top;
}